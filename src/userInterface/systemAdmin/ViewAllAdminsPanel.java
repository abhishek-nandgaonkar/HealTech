/*
 * Copyright (C) 2014 Abhishek
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
package userInterface.systemAdmin;

import baseClasses.enterprise.CityEnterprise;
import baseClasses.enterprise.CountryEnterprise;
import baseClasses.enterprise.Enterprise;
import baseClasses.enterprise.FDAEnterprise;
import baseClasses.enterprise.StateEnterprise;
import baseClasses.network.Network;
import baseClasses.organization.DrugAdminOrganization;
import baseClasses.organization.Organization;
import baseClasses.userAccount.UserAccount;
import business.CentralAuthority;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Abhishek
 */
public class ViewAllAdminsPanel extends javax.swing.JPanel {

    /**
     * Creates new form ViewAllAdminsPanel
     */
    CentralAuthority centralAuthority;

    public ViewAllAdminsPanel(CentralAuthority centralAuthority) {
        initComponents();
        this.centralAuthority = centralAuthority;
        populateTableAdmins();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblName2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblAdmins = new javax.swing.JTable();

        setBackground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(1591, 820));

        lblName2.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        lblName2.setForeground(new java.awt.Color(0, 153, 51));
        lblName2.setText("                              View All Admins");

        tblAdmins.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tblAdmins.setForeground(new java.awt.Color(0, 204, 51));
        tblAdmins.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Username", "Enterprise", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblAdmins);
        if (tblAdmins.getColumnModel().getColumnCount() > 0) {
            tblAdmins.getColumnModel().getColumn(0).setResizable(false);
            tblAdmins.getColumnModel().getColumn(1).setResizable(false);
            tblAdmins.getColumnModel().getColumn(2).setResizable(false);
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(124, 124, 124)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblName2, javax.swing.GroupLayout.PREFERRED_SIZE, 921, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 921, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(391, 546, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(lblName2)
                .addGap(27, 27, 27)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 618, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(107, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblName2;
    private javax.swing.JTable tblAdmins;
    // End of variables declaration//GEN-END:variables

    private void populateTableAdmins() {
        DefaultTableModel dtm = (DefaultTableModel) tblAdmins.getModel();
        dtm.setRowCount(0);
        UserAccount userAccount = null;

        for (Enterprise countryEnterprise : centralAuthority.getInternationalNetwork().getEnterpriseDirectory().getEnterpriseList()) {
            if (countryEnterprise.getClass() == CountryEnterprise.class) {
                CountryEnterprise country = (CountryEnterprise) countryEnterprise;
                Network countryNetwork = country.getCountryNetwork();

                for (UserAccount userAccount1 : countryEnterprise.getUserAccountDirectory().getUserAccountList()) {
                    Object[] row = new Object[3];
                    row[0] = userAccount1;
                    row[1] = countryEnterprise;
                    row[2] = userAccount1.getStatus();
                    dtm.addRow(row);
                }
                for (Enterprise stateEnterprise : countryNetwork.getEnterpriseDirectory().getEnterpriseList()) {
                    if (stateEnterprise.getClass() == StateEnterprise.class) {
                        StateEnterprise state = (StateEnterprise) stateEnterprise;
                        Network stateNetwork = state.getStateNetwork();

                        for (Enterprise cityEnterprise : stateNetwork.getEnterpriseDirectory().getEnterpriseList()) {
                            CityEnterprise city = (CityEnterprise) cityEnterprise;
                            Network cityNetwork = city.getCityNetwork();

                            for (Enterprise enterprise : cityNetwork.getEnterpriseDirectory().getEnterpriseList()) {
                                //userAccount = enterprise.getUserAccountDirectory().authenticateUser(userName, password);
                                for (UserAccount userAccount1 : enterprise.getUserAccountDirectory().getUserAccountList()) {
                                    Object[] row = new Object[3];
                                    row[0] = userAccount1;
                                    row[1] = enterprise;
                                    row[2] = userAccount1.getStatus();
                                    dtm.addRow(row);
                                }

                                {
                                    for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                                        //userAccount = organization.getUserAccountDirectory().authenticateUser(userName, password);
                                        for (UserAccount userAccount1 : enterprise.getUserAccountDirectory().getUserAccountList()) {
                                            Object[] row = new Object[3];
                                            row[0] = userAccount1;
                                            row[1] = organization;
                                            row[2] = userAccount1.getStatus();
                                            dtm.addRow(row);
                                        }

                                    }
                                }

                            }

                        }
                    }
                    if (stateEnterprise.getClass() == FDAEnterprise.class) {
                        FDAEnterprise fda = (FDAEnterprise) stateEnterprise;
                        DrugAdminOrganization drugAdminOrganization = null;

                        for (UserAccount userAccount1 : fda.getUserAccountDirectory().getUserAccountList()) {
                            Object[] row = new Object[3];
                            row[0] = userAccount1;
                            row[1] = fda;
                            row[2] = userAccount1.getStatus();
                            dtm.addRow(row);
                        }
                        for (Organization org : fda.getOrganizationDirectory().getOrganizationList()) {
                            if (org.getClass() == DrugAdminOrganization.class) {
                                drugAdminOrganization = (DrugAdminOrganization) org;

                                for (UserAccount ua : drugAdminOrganization.getUserAccountDirectory().getUserAccountList()) {
                                    Object[] row = new Object[3];
                                    row[0] = ua;
                                    row[1] = drugAdminOrganization;
                                    row[2] = ua.getStatus();
                                    dtm.addRow(row);
                                }
                            }
                        }
                    }

                }
            }

        }
        dtm.removeRow(0);
        dtm.removeRow(0);
    }
}
