/*
 * Copyright (C) 2014 Abhishek
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
package userInterface.hospital;

import baseClasses.citizen.Citizen;
import baseClasses.doctor.Doctor;
import baseClasses.patient.Patient;
import baseClasses.enterprise.CityEnterprise;
import baseClasses.enterprise.CountryEnterprise;
import baseClasses.enterprise.Enterprise;
import baseClasses.enterprise.HospitalEnterprise;
import baseClasses.enterprise.StateEnterprise;
import baseClasses.network.Network;
import baseClasses.organization.CitizenOrganization;
import baseClasses.organization.DoctorOrganization;
import baseClasses.organization.PatientOrganization;
import baseClasses.organization.Organization;
import baseClasses.person.Person;
import baseClasses.roles.DoctorRole;
import baseClasses.roles.PatientRole;
import baseClasses.userAccount.UserAccount;
import baseClasses.vitalSigns.Height;
import java.util.ArrayList;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Abhishek
 */
public class AddNewPatientPanel extends javax.swing.JPanel {

    /**
     * Creates new form AddNewPatientPanel
     */
    Network internationalNetwork;
    ArrayList<HospitalEnterprise> docHospitalsList;
    Patient patient = new Patient();
    HospitalEnterprise hospitalEnterprise;
    Citizen finalCitizen = null;
    
    public AddNewPatientPanel(Network internationalNetwork, HospitalEnterprise hospitalEnterprise) {
        initComponents();
        this.internationalNetwork = internationalNetwork;
        this.hospitalEnterprise = hospitalEnterprise;
        
        docHospitalsList = new ArrayList();
        populateCountryList();
        populateDoctorList();
        
        txtHeight.setEnabled(false);
        txtHeightInches.setEnabled(false);
        txtPassword.setEnabled(false);
        txtPassword1.setEnabled(false);
        txtUID.setEnabled(false);
        txtUsername.setEnabled(false);
        txtWeight.setEnabled(false);
        btnAddPatient.setEnabled(false);
        btnSearch.setEnabled(false);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        lblName1 = new javax.swing.JLabel();
        lblName2 = new javax.swing.JLabel();
        txtHeightInches = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        lblName3 = new javax.swing.JLabel();
        cmbCountryList = new javax.swing.JComboBox();
        btnAddPatient = new javax.swing.JButton();
        txtWeight = new javax.swing.JTextField();
        lblName4 = new javax.swing.JLabel();
        txtHeight = new javax.swing.JTextField();
        lblName5 = new javax.swing.JLabel();
        lblName6 = new javax.swing.JLabel();
        lblName7 = new javax.swing.JLabel();
        btnSetPrimaryDoctory = new javax.swing.JButton();
        lblSelectCountry5 = new javax.swing.JLabel();
        txtUsername = new javax.swing.JTextField();
        txtPassword = new javax.swing.JPasswordField();
        lblSelectCountry6 = new javax.swing.JLabel();
        lblResult = new javax.swing.JLabel();
        btnSearch1 = new javax.swing.JButton();
        txtUID = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDoctorList = new javax.swing.JTable();
        btnClear1 = new javax.swing.JButton();
        lblSelectCountry7 = new javax.swing.JLabel();
        txtPassword1 = new javax.swing.JPasswordField();

        setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/baseClasses/healtech logo.PNG"))); // NOI18N

        lblName1.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        lblName1.setForeground(new java.awt.Color(0, 153, 51));
        lblName1.setText("                              Add New Patient");

        lblName2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblName2.setForeground(new java.awt.Color(0, 153, 51));
        lblName2.setText("Height");

        txtHeightInches.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        btnSearch.setBackground(new java.awt.Color(255, 255, 255));
        btnSearch.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnSearch.setForeground(new java.awt.Color(0, 153, 0));
        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        lblName3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblName3.setForeground(new java.awt.Color(0, 153, 51));
        lblName3.setText("Select Country");

        cmbCountryList.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        cmbCountryList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbCountryListActionPerformed(evt);
            }
        });

        btnAddPatient.setBackground(new java.awt.Color(255, 255, 255));
        btnAddPatient.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnAddPatient.setForeground(new java.awt.Color(0, 153, 0));
        btnAddPatient.setText("Add Patient");
        btnAddPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddPatientActionPerformed(evt);
            }
        });

        txtWeight.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        lblName4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblName4.setForeground(new java.awt.Color(0, 153, 51));
        lblName4.setText("Search by Citizen ID");

        txtHeight.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        lblName5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblName5.setForeground(new java.awt.Color(0, 153, 51));
        lblName5.setText("ft");

        lblName6.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblName6.setForeground(new java.awt.Color(0, 153, 51));
        lblName6.setText("inches");

        lblName7.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblName7.setForeground(new java.awt.Color(0, 153, 51));
        lblName7.setText("Weight");

        btnSetPrimaryDoctory.setBackground(new java.awt.Color(255, 255, 255));
        btnSetPrimaryDoctory.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnSetPrimaryDoctory.setForeground(new java.awt.Color(0, 153, 0));
        btnSetPrimaryDoctory.setText("Set Primary Doctor");
        btnSetPrimaryDoctory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSetPrimaryDoctoryActionPerformed(evt);
            }
        });

        lblSelectCountry5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblSelectCountry5.setForeground(new java.awt.Color(0, 153, 51));
        lblSelectCountry5.setText("Username");

        txtUsername.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        txtPassword.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        lblSelectCountry6.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblSelectCountry6.setForeground(new java.awt.Color(0, 153, 51));
        lblSelectCountry6.setText("Password");

        lblResult.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblResult.setForeground(new java.awt.Color(0, 153, 51));

        btnSearch1.setBackground(new java.awt.Color(255, 255, 255));
        btnSearch1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnSearch1.setForeground(new java.awt.Color(0, 153, 0));
        btnSearch1.setText("View Profile");
        btnSearch1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearch1ActionPerformed(evt);
            }
        });

        txtUID.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        tblDoctorList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Doctor", "Speciality"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblDoctorList);
        if (tblDoctorList.getColumnModel().getColumnCount() > 0) {
            tblDoctorList.getColumnModel().getColumn(0).setResizable(false);
            tblDoctorList.getColumnModel().getColumn(1).setResizable(false);
        }

        btnClear1.setBackground(new java.awt.Color(255, 255, 255));
        btnClear1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnClear1.setForeground(new java.awt.Color(0, 153, 0));
        btnClear1.setText("Clear ");
        btnClear1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClear1ActionPerformed(evt);
            }
        });

        lblSelectCountry7.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblSelectCountry7.setForeground(new java.awt.Color(0, 153, 51));
        lblSelectCountry7.setText("Re enter Password");

        txtPassword1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(1447, Short.MAX_VALUE)
                .addComponent(jLabel1))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(189, 189, 189)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblName1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnClear1, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnAddPatient))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                            .addComponent(lblName3, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(18, 18, 18)
                                            .addComponent(cmbCountryList, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(lblResult, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(lblSelectCountry5)
                                                .addComponent(lblSelectCountry6)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(lblName4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(lblSelectCountry7)))
                                            .addGap(18, 18, 18)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(txtPassword1)
                                                .addComponent(txtUsername, javax.swing.GroupLayout.DEFAULT_SIZE, 210, Short.MAX_VALUE)
                                                .addComponent(txtPassword)
                                                .addComponent(txtUID, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                            .addComponent(lblName2, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(19, 19, 19)
                                            .addComponent(txtHeight, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(lblName5, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(txtHeightInches, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                            .addComponent(lblName7, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(18, 18, 18)
                                            .addComponent(txtWeight, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnSearch, javax.swing.GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE)
                                    .addComponent(btnSearch1, javax.swing.GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE)
                                    .addComponent(lblName6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 129, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSetPrimaryDoctory, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20)))
                .addGap(145, 145, 145))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(lblName1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(109, 109, 109)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblName3)
                            .addComponent(cmbCountryList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnSearch)
                            .addComponent(lblName4)
                            .addComponent(txtUID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnSearch1)
                            .addComponent(lblResult, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(57, 57, 57)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblName2)
                            .addComponent(txtHeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtHeightInches, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblName5)
                            .addComponent(lblName6))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblName7)
                            .addComponent(txtWeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(39, 39, 39)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblSelectCountry5)
                                .addGap(18, 18, 18)
                                .addComponent(lblSelectCountry6, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtPassword1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblSelectCountry7, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(40, 40, 40)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnClear1)
                            .addComponent(btnAddPatient))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 59, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnSetPrimaryDoctory)
                        .addGap(102, 102, 102)))
                .addComponent(jLabel1))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        System.out.println("in the search button method in add new patient panel");
        CountryEnterprise countryEnterprise = (CountryEnterprise) cmbCountryList.getSelectedItem();
        System.out.println("Country enterprise sel" + countryEnterprise);
        int UID = Integer.parseInt(txtUID.getText());
        System.out.println(UID);
        StateEnterprise stateEnterprise = null;
        CityEnterprise cityEnterprise = null;
        Citizen citizen = null;
        PatientOrganization patientOrganization = null;
        
        CountryEnterprise countryEnt = null;
        CitizenOrganization citizenOrganization = null;
        
        for (Enterprise country : internationalNetwork.getEnterpriseDirectory().getEnterpriseList()) {
            if (country.getClass() == CountryEnterprise.class) {
                countryEnt = (CountryEnterprise) country;
                
                if (countryEnt.getName().equals(countryEnterprise.getName())) {
                    System.out.println("Country found: " + countryEnt);
                    countryEnterprise = countryEnt;
                    for (Enterprise state : countryEnterprise.getCountryNetwork().getEnterpriseDirectory().getEnterpriseList()) {
                        if (state.getClass() == StateEnterprise.class) {
                            stateEnterprise = (StateEnterprise) state;
                            for (Enterprise city : stateEnterprise.getStateNetwork().getEnterpriseDirectory().getEnterpriseList()) {
                                cityEnterprise = (CityEnterprise) city;
                                
                                for (Organization organization : cityEnterprise.getOrganizationDirectory().getOrganizationList()) {
                                    if (organization.getClass() == CitizenOrganization.class) {
                                        citizenOrganization = (CitizenOrganization) organization;
                                        for (Person person : citizenOrganization.getPersonDirectory().getPersonList()) {
                                            if (person.getClass() == Citizen.class) {
                                                citizen = (Citizen) person;
                                                System.out.println("" + cityEnterprise.getName() + " " + person.getName().getFirstName() + " " + cityEnterprise.getPersonDirectory().getPersonList().size());
                                                if (citizen.getUID() == UID) {
                                                    finalCitizen = citizen;
                                                    lblResult.setText("Profile Found: " + finalCitizen.getName().getFirstName());
                                                    System.out.println("Profile found in Add Patient Panel");
                                                    
                                                    System.out.println(hospitalEnterprise);
                                                    System.out.println(hospitalEnterprise.getOrganizationDirectory());
                                                    System.out.println(hospitalEnterprise.getOrganizationDirectory().getOrganizationList());
                                                    
                                                    for (Organization patientOrg : hospitalEnterprise.getOrganizationDirectory().getOrganizationList()) {
                                                        if (patientOrg.getClass() == PatientOrganization.class) {
                                                            patientOrganization = (PatientOrganization) patientOrg;
                                                            
                                                            Patient patient = new Patient();
                                                            //patient.setHighestDegree(txtHightestDegree1.getText());
                                                            //patient.setSpecialization(txtSpecialization.getText());
                                                            patient.setUID(UID);
                                                            
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    
                                }
                                
                            }
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void cmbCountryListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbCountryListActionPerformed
        // TODO add your handling code here:
        txtHeight.setEnabled(true);
        txtHeightInches.setEnabled(true);
        txtPassword.setEnabled(true);
        txtPassword1.setEnabled(true);
        txtUID.setEnabled(true);
        txtUsername.setEnabled(true);
        txtWeight.setEnabled(true);
        btnAddPatient.setEnabled(true);
        btnSearch.setEnabled(true);

    }//GEN-LAST:event_cmbCountryListActionPerformed

    private void btnAddPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddPatientActionPerformed
        // TODO add your handling code here:
        if (!(patient.getPrimaryDoctor() == null)) {
            if (!(txtUsername.getText().isEmpty())) {
                if (!(String.valueOf(txtPassword.getPassword()).equals(""))) {
                    if (!(String.valueOf(txtPassword1.getPassword()).equals(""))) {
                        
                        String one = String.valueOf(txtPassword.getPassword());
                        String two = String.valueOf(txtPassword1.getPassword());
                        if (one.equals(two)) {
                            
                            patient.setAddress(finalCitizen.getAddress());
                            patient.setDateOfBirth(finalCitizen.getDateOfBirth());
                            patient.setName(finalCitizen.getName());
                            patient.setNationality(finalCitizen.getNationality());
                            
                            patient.setUID(Integer.parseInt(txtUID.getText()));
        //patient.setHighestDegree(txtHightestDegree1.getText());
                            //patient.setSpecialization(txtSpecialization.getText());
                            patient.setWeight(Float.parseFloat(txtWeight.getText()));
                            patient.setHeight(new Height(Integer.parseInt(txtHeight.getText()), Integer.parseInt(txtHeightInches.getText())));
                            patient.setCountryEnterprise((CountryEnterprise) cmbCountryList.getSelectedItem());
                            int selectedRow = tblDoctorList.getSelectedRow();
                            Doctor docFromTable = (Doctor) tblDoctorList.getValueAt(selectedRow, 0);
                            patient.setPrimaryDoctor((Doctor) tblDoctorList.getValueAt(selectedRow, 0));
                            
                            for (Organization org : hospitalEnterprise.getOrganizationDirectory().getOrganizationList()) {
                                if (org.getClass() == DoctorOrganization.class) {
                                    DoctorOrganization doctorOrganization = (DoctorOrganization) org;
                                    
                                    for (UserAccount ua : doctorOrganization.getUserAccountDirectory().getUserAccountList()) {
                                        if (ua.getRole().getClass() == DoctorRole.class) {
                                            Doctor tempDoc = (Doctor) ua.getPerson();
                                            if (tempDoc.getUID() == docFromTable.getUID()) {
                                                tempDoc.getPatientList().add(patient);
                                            }
                                        }
                                        
                                    }
                                }
                                
                            }

                            //hospitalEnterprise.getPersonDirectory().getPersonList().add(patient);
                            PatientOrganization patientOrganization = null;
                            
                            for (Organization organization : hospitalEnterprise.getOrganizationDirectory().getOrganizationList()) {
                                if (organization.getClass() == PatientOrganization.class) {
                                    patientOrganization = (PatientOrganization) organization;
                                    patientOrganization.getPersonDirectory().getPersonList().add(patient);
                                }
                            }
                            
                            for (Organization organization : hospitalEnterprise.getOrganizationDirectory().getOrganizationList()) {
                                if (organization.getClass() == PatientOrganization.class) {
                                    patientOrganization = (PatientOrganization) organization;
                                    patientOrganization.getPersonDirectory().getPersonList().add(patient);
                                    Person tempPerson = patient;
                                    patientOrganization.getUserAccountDirectory().createUserAccount(txtUsername.getText(), String.valueOf(txtPassword.getPassword()), new PatientRole(), "Active", tempPerson);
                                    
                                    System.out.println("Flag became true");
                                }
                            }
                            
                        } else {
                            JOptionPane.showMessageDialog(this, "The two passwords entered do not match", "Error", JOptionPane.ERROR_MESSAGE);
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Please enter the password in both the fields", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Please enter the password in both the fields", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Please enter the username", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select primary doctor", "Error", JOptionPane.ERROR_MESSAGE);
        }
        

    }//GEN-LAST:event_btnAddPatientActionPerformed

    private void btnSetPrimaryDoctoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSetPrimaryDoctoryActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblDoctorList.getSelectedRow();
        
        if (selectedRow > -1) {
            patient.setPrimaryDoctor((Doctor) tblDoctorList.getValueAt(selectedRow, 0));
        }
    }//GEN-LAST:event_btnSetPrimaryDoctoryActionPerformed

    private void btnSearch1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearch1ActionPerformed
        // TODO add your handling code here:
        //JFrame detailsFrame = new JFrame("View Citizen Profile");
        //jframe.add(new EditCitizenDetails());
        JFrame frame = new JFrame(finalCitizen.getName().getFirstName() + " " + finalCitizen.getName().getLastName());
        frame.setSize(1200, 1000);
        
        frame.setVisible(true);
        frame.add(new ViewCitizenDetails(internationalNetwork, finalCitizen, null));
    }//GEN-LAST:event_btnSearch1ActionPerformed

    private void btnClear1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClear1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnClear1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddPatient;
    private javax.swing.JButton btnClear1;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnSearch1;
    private javax.swing.JButton btnSetPrimaryDoctory;
    private javax.swing.JComboBox cmbCountryList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblName1;
    private javax.swing.JLabel lblName2;
    private javax.swing.JLabel lblName3;
    private javax.swing.JLabel lblName4;
    private javax.swing.JLabel lblName5;
    private javax.swing.JLabel lblName6;
    private javax.swing.JLabel lblName7;
    private javax.swing.JLabel lblResult;
    private javax.swing.JLabel lblSelectCountry5;
    private javax.swing.JLabel lblSelectCountry6;
    private javax.swing.JLabel lblSelectCountry7;
    private javax.swing.JTable tblDoctorList;
    private javax.swing.JTextField txtHeight;
    private javax.swing.JTextField txtHeightInches;
    private javax.swing.JPasswordField txtPassword;
    private javax.swing.JPasswordField txtPassword1;
    private javax.swing.JTextField txtUID;
    private javax.swing.JTextField txtUsername;
    private javax.swing.JTextField txtWeight;
    // End of variables declaration//GEN-END:variables
     private void populateCountryList() {
        cmbCountryList.removeAllItems();
        CountryEnterprise countryEnterprise;
        
        for (Enterprise country : internationalNetwork.getEnterpriseDirectory().getEnterpriseList()) {
            cmbCountryList.addItem((CountryEnterprise) country);
            
        }
        
    }
    
    private void populateDoctorList() {
        DefaultTableModel dtm = (DefaultTableModel) tblDoctorList.getModel();
        
        DoctorOrganization doctorOrganization = null;
        System.out.println("Printing from Add new patient: " + hospitalEnterprise.getOrganizationDirectory().getOrganizationList());
        for (Organization doc : hospitalEnterprise.getOrganizationDirectory().getOrganizationList()) {
            if (doc.getClass() == DoctorOrganization.class) {
                doctorOrganization = (DoctorOrganization) doc;
                System.out.println(doctorOrganization.getUserAccountDirectory().getUserAccountList().size());
                for (UserAccount userAccount : doctorOrganization.getUserAccountDirectory().getUserAccountList()) {
                    Doctor doctor = (Doctor) userAccount.getPerson();
                    Object[] row = new Object[2];
                    row[0] = doctor;
                    row[1] = doctor.getSpecialization();
                    dtm.addRow(row);
                }
            }
        }
        
    }
    
}
