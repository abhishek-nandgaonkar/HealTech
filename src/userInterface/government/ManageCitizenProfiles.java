/*
 * Copyright (C) 2014 Abhishek
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
package userInterface.government;

import baseClasses.citizen.Citizen;
import baseClasses.enterprise.CityEnterprise;
import baseClasses.enterprise.CountryEnterprise;
import baseClasses.enterprise.Enterprise;
import baseClasses.enterprise.StateEnterprise;
import baseClasses.network.Network;
import baseClasses.organization.CitizenOrganization;
import baseClasses.organization.Organization;
import baseClasses.person.Person;
import java.awt.CardLayout;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Abhishek
 */

public class ManageCitizenProfiles extends javax.swing.JPanel {

    /**
     * Creates new form ManageCitizenProfiles
     */
    Network internationalNetwork;
    JPanel manageCitizensProfileCard;
    private String nationaltity;
    
    public ManageCitizenProfiles(Network internationalNetwork, JPanel manageCitizensProfileCard, String nationality) {
        initComponents();
        this.internationalNetwork = internationalNetwork;
        this.manageCitizensProfileCard = manageCitizensProfileCard;
        this.nationaltity = nationality;
        populateCountryList();
        cmbCityList.setEnabled(false);
        cmbStateList.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        lblName1 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        cmbCountryList = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        cmbCityList = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        cmbStateList = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCitizens = new javax.swing.JTable();
        btnShowDetails = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/baseClasses/healtech logo.PNG"))); // NOI18N

        lblName1.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        lblName1.setForeground(new java.awt.Color(0, 153, 51));
        lblName1.setText("                      Manage Citizens");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 153, 51));
        jLabel6.setText("Country");

        cmbCountryList.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        cmbCountryList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbCountryListActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 153, 51));
        jLabel5.setText("City");

        cmbCityList.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        cmbCityList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbCityListActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 153, 51));
        jLabel4.setText("State");

        cmbStateList.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        cmbStateList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbStateListActionPerformed(evt);
            }
        });

        tblCitizens.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tblCitizens.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Citizen ID"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblCitizens);
        if (tblCitizens.getColumnModel().getColumnCount() > 0) {
            tblCitizens.getColumnModel().getColumn(0).setResizable(false);
        }

        btnShowDetails.setBackground(new java.awt.Color(255, 255, 255));
        btnShowDetails.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnShowDetails.setForeground(new java.awt.Color(0, 153, 0));
        btnShowDetails.setText("Show Details");
        btnShowDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowDetailsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(175, 175, 175)
                .addComponent(lblName1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1))
            .addGroup(layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(jLabel4))
                .addGap(48, 48, 48)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cmbCountryList, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cmbCityList, 0, 219, Short.MAX_VALUE)
                    .addComponent(cmbStateList, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(162, 162, 162)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnShowDetails, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 413, Short.MAX_VALUE))
                .addContainerGap(557, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addComponent(lblName1)
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmbCountryList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addGap(51, 51, 51)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(cmbStateList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(43, 43, 43)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(cmbCityList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 614, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39)
                .addComponent(btnShowDetails)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cmbCountryListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbCountryListActionPerformed
        // TODO add your handling code here:
        cmbStateList.setEnabled(true);
        populateStateList((CountryEnterprise) cmbCountryList.getSelectedItem());
        
    }//GEN-LAST:event_cmbCountryListActionPerformed

    private void cmbStateListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbStateListActionPerformed
        // TODO add your handling code here:
       
        populateCityList((StateEnterprise)cmbStateList.getSelectedItem());
         cmbCityList.setEnabled(true);
    }//GEN-LAST:event_cmbStateListActionPerformed

    private void cmbCityListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbCityListActionPerformed
        // TODO add your handling code here:
        CityEnterprise cityEnterprise = (CityEnterprise) cmbCityList.getSelectedItem();
        
        CitizenOrganization citizenOrganization = null;
        boolean flag = false;
        Citizen citizen = null;
        
        DefaultTableModel dtm = (DefaultTableModel) tblCitizens.getModel();
        dtm.setRowCount(0);
        
        for(Organization organization: cityEnterprise.getOrganizationDirectory().getOrganizationList())
        {
            if(organization.getClass() == CitizenOrganization.class)
            {
                citizenOrganization = (CitizenOrganization) organization;
                flag = true;
            }
        }
        //if(flag)
        {
            System.out.println("Printing from Manage Citizens Panel" + citizenOrganization + citizenOrganization.getPersonDirectory() + citizenOrganization.getPersonDirectory().getPersonList().size());
            System.out.println(citizenOrganization.getPersonDirectory().getPersonList());
            for(Person person: citizenOrganization.getPersonDirectory().getPersonList())
            {
                System.out.println(cityEnterprise);
                System.out.println(citizenOrganization);
                System.out.println(citizenOrganization.getPersonDirectory().getPersonList().size());
                System.out.println(person.getName().getFirstName() + " " + person.getName().getLastName());
                //citizen = (Citizen) person;
                Object[] row = new Object[1];
                row[0] = person;
                
                dtm.addRow(row);
            }
        }
    }//GEN-LAST:event_cmbCityListActionPerformed

    private void btnShowDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowDetailsActionPerformed
        // TODO add your handling code here:
      int selectedRow = tblCitizens.getSelectedRow();
       Citizen citizen = (Citizen) tblCitizens.getValueAt(selectedRow, 0);
              
       CardLayout layout = (CardLayout) manageCitizensProfileCard.getLayout();
       manageCitizensProfileCard.add(new EditCitizenDetails(internationalNetwork, citizen, manageCitizensProfileCard));
       layout.next(manageCitizensProfileCard);
      //this.add(new EditCitizenDetails((internationalNetwork,citizen)));
              

    }//GEN-LAST:event_btnShowDetailsActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnShowDetails;
    private javax.swing.JComboBox cmbCityList;
    private javax.swing.JComboBox cmbCountryList;
    private javax.swing.JComboBox cmbStateList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblName1;
    private javax.swing.JTable tblCitizens;
    // End of variables declaration//GEN-END:variables
     private void populateCountryList()
    {
        cmbCountryList.removeAllItems();
        CountryEnterprise countryEnterprise;
        
        for(Enterprise country: internationalNetwork.getEnterpriseDirectory().getEnterpriseList())
        {
            cmbCountryList.addItem((CountryEnterprise) country);
        }
        
    }

    private void populateStateList(CountryEnterprise countryEnterprise)
    {
        
        cmbStateList.removeAllItems();
        
        for(Enterprise state: countryEnterprise.getCountryNetwork().getEnterpriseDirectory().getEnterpriseList())
        {
            if(state.getClass() == StateEnterprise.class)
                cmbStateList.addItem((StateEnterprise) state);
        }
 
    }

    private void populateCityList(StateEnterprise stateEnterprise)
    {
        System.out.println("In the populate city list");
                cmbCityList.removeAllItems();
        
        System.out.println(stateEnterprise.getStateNetwork().getEnterpriseDirectory().getEnterpriseList().size());
        for(Enterprise city: stateEnterprise.getStateNetwork().getEnterpriseDirectory().getEnterpriseList())
        {
            System.out.println("Adding city to combo box"+city.getName());
            cmbCityList.addItem((CityEnterprise) city);
            
        }
    }

}
