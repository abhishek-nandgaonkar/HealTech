/*
 * Copyright (C) 2014 Abhishek
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
package userInterface.doctor;

import baseClasses.allergy.Allergy;
import baseClasses.allergy.MedicinalAllergy;
import baseClasses.medicine.Prescription;
import baseClasses.patient.Patient;
import baseClasses.patient.PatientProfile;
import baseClasses.vitalSigns.VitalSign;
import java.awt.CardLayout;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Abhishek
 */
public class ViewPatientProfiles extends javax.swing.JPanel {

    /**
     * Creates new form ViewPatientProfiles
     */
    Patient patient;
    PatientProfile patientProfile;
    JPanel userProcessContainer;
    
    public ViewPatientProfiles(Patient patient, JPanel userProcessContainer) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.patient = patient;
        patientProfile = patient.getPatientProfile();
        System.out.println(patient);
        System.out.println("zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz" + patientProfile);
        populateAllergies();
        populateMedicinalAllergies();
        populatePrescriptions();
        populateVitalSignHistory();
        
        txtDisease.setText(patient.getPatientProfile().getPrescriptionHistory().get(patient.getPatientProfile().getPrescriptionHistory().size()-1).getDisease().getName());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        lblName1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPrescription = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblMedicinalAllergy = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblAllergy = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblVitalSignHistory = new javax.swing.JTable();
        txtDisease = new javax.swing.JTextField();
        lblName2 = new javax.swing.JLabel();
        btnViewPresciption = new javax.swing.JButton();
        btnViewVitalSignHistory = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/baseClasses/healtech logo.PNG"))); // NOI18N

        lblName1.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        lblName1.setForeground(new java.awt.Color(0, 153, 51));
        lblName1.setText("     View Patient Profiles");

        tblPrescription.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Prescription", "Timestamp"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblPrescription);
        if (tblPrescription.getColumnModel().getColumnCount() > 0) {
            tblPrescription.getColumnModel().getColumn(0).setResizable(false);
            tblPrescription.getColumnModel().getColumn(1).setResizable(false);
        }

        tblMedicinalAllergy.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Medicinal Allergy"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblMedicinalAllergy);
        if (tblMedicinalAllergy.getColumnModel().getColumnCount() > 0) {
            tblMedicinalAllergy.getColumnModel().getColumn(0).setResizable(false);
        }

        tblAllergy.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Allergy"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tblAllergy);
        if (tblAllergy.getColumnModel().getColumnCount() > 0) {
            tblAllergy.getColumnModel().getColumn(0).setResizable(false);
        }

        tblVitalSignHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Vital Sign History"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(tblVitalSignHistory);
        if (tblVitalSignHistory.getColumnModel().getColumnCount() > 0) {
            tblVitalSignHistory.getColumnModel().getColumn(0).setResizable(false);
        }

        txtDisease.setEditable(false);
        txtDisease.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        lblName2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblName2.setForeground(new java.awt.Color(0, 153, 51));
        lblName2.setText("Disease:");

        btnViewPresciption.setBackground(new java.awt.Color(255, 255, 255));
        btnViewPresciption.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnViewPresciption.setForeground(new java.awt.Color(0, 153, 0));
        btnViewPresciption.setText("View Prescriptions");
        btnViewPresciption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewPresciptionActionPerformed(evt);
            }
        });

        btnViewVitalSignHistory.setBackground(new java.awt.Color(255, 255, 255));
        btnViewVitalSignHistory.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnViewVitalSignHistory.setForeground(new java.awt.Color(0, 153, 0));
        btnViewVitalSignHistory.setText("View Vital Signs");
        btnViewVitalSignHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewVitalSignHistoryActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(60, 60, 60)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(53, 53, 53)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(72, 72, 72)
                        .addComponent(btnViewPresciption, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(656, 656, 656)
                        .addComponent(btnViewVitalSignHistory, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblName2, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDisease, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 115, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGap(434, 434, 434)
                .addComponent(lblName1, javax.swing.GroupLayout.PREFERRED_SIZE, 536, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(lblName1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(144, 144, 144)
                        .addComponent(lblName2)
                        .addGap(18, 18, 18)
                        .addComponent(txtDisease, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(486, 542, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(107, 107, 107)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 584, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 584, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 584, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 584, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnViewPresciption)
                            .addComponent(btnViewVitalSignHistory))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnViewPresciptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewPresciptionActionPerformed
        // TODO add your handling code here:
         //userProcessContainer.setLayout(new CardLayout());
        JFrame frame = new JFrame();
        frame.setSize(500,500);
        frame.add(new ViewPrescription(patientProfile));
        frame.setVisible(true);
        
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        userProcessContainer.add(new ViewPrescription(patientProfile));
        layout.next(userProcessContainer);
    }//GEN-LAST:event_btnViewPresciptionActionPerformed

    private void btnViewVitalSignHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewVitalSignHistoryActionPerformed
        // TODO add your handling code here:
        //userProcessContainer.setLayout(new CardLayout());
        
        JFrame frame = new JFrame();
        frame.setSize(500,500);
        frame.add(new ViewPatientProfiles(patient,userProcessContainer));
        frame.setVisible(true);
        
//        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
//        userProcessContainer.add(new ViewPatientProfiles(patient,userProcessContainer));
//        layout.next(userProcessContainer);
        
        
        
        
    }//GEN-LAST:event_btnViewVitalSignHistoryActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnViewPresciption;
    private javax.swing.JButton btnViewVitalSignHistory;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel lblName1;
    private javax.swing.JLabel lblName2;
    private javax.swing.JTable tblAllergy;
    private javax.swing.JTable tblMedicinalAllergy;
    private javax.swing.JTable tblPrescription;
    private javax.swing.JTable tblVitalSignHistory;
    private javax.swing.JTextField txtDisease;
    // End of variables declaration//GEN-END:variables

    private void populatePatientProfiles()
    {
        PatientProfile patientProfile= patient.getPatientProfile();
        
        
        {
            
        }
    }

    private void populateAllergies() {
        
        DefaultTableModel dtm = (DefaultTableModel) tblAllergy.getModel();
        dtm.setRowCount(0);
        
        
        for(Allergy allergy: patientProfile.getAllergiesList())
        {
            Object[] row = new Object[1];
            row[0] = allergy;
            dtm.addRow(row);
        }
    }

    private void populateMedicinalAllergies() {
        DefaultTableModel dtm = (DefaultTableModel) tblMedicinalAllergy.getModel();
        dtm.setRowCount(0);
        
        
        for(MedicinalAllergy medicinalAllergy: patientProfile.getMedicinalAllergyList())
        {
            Object[] row = new Object[1];
            row[0] = medicinalAllergy;
            dtm.addRow(row);
        }
    }

    private void populatePrescriptions()
    {
        DefaultTableModel dtm = (DefaultTableModel) tblPrescription.getModel();
        dtm.setRowCount(0);
        
        System.out.println("printing ffrom view patient profiles");
        System.out.println(patientProfile);
        System.out.println(patientProfile.getPrescriptionHistory().size());
        for(Prescription prescription: patientProfile.getPrescriptionHistory())
        {
            Object[] row = new Object[1];
            row[0] = prescription;
            dtm.addRow(row);
        }
        
    }

    private void populateVitalSignHistory() {
        DefaultTableModel dtm = (DefaultTableModel) tblVitalSignHistory.getModel();
        dtm.setRowCount(0);
        
        for(VitalSign vitalSign: patientProfile.getVitalSignHistory())
        {
            Object[] row = new Object[1];
            row[0] = vitalSign;
            dtm.addRow(row);
        }
    }
}
