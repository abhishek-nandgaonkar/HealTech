/*
 * Copyright (C) 2014 Abhishek
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
package userInterface.doctor;

import baseClasses.citizen.Citizen;
import baseClasses.enterprise.CityEnterprise;
import baseClasses.enterprise.CountryEnterprise;
import baseClasses.enterprise.Enterprise;
import baseClasses.enterprise.HospitalEnterprise;
import baseClasses.enterprise.StateEnterprise;
import baseClasses.network.Network;
import baseClasses.organization.CitizenOrganization;
import baseClasses.organization.DoctorOrganization;
import baseClasses.organization.Organization;
import baseClasses.organization.PatientOrganization;
import baseClasses.patient.Patient;
import baseClasses.person.Person;
import baseClasses.userAccount.UserAccount;
import java.awt.CardLayout;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import userInterface.government.EditCitizenDetails;
import userInterface.hospital.ViewCitizenDetails;

/**
 *
 * @author Abhishek
 */
public class FindGlobalPatientProfiles extends javax.swing.JPanel {

    /**
     * Creates new form FindLocalPatientProfiles
     */
    private UserAccount userAccount;
    private CityEnterprise cityEnterprise;
    private Network internationalNetwork;
    private Citizen finalCitizen = null;
    private JPanel userProcessContainer;
    
    public FindGlobalPatientProfiles(Network internationalNetwork,  UserAccount userAccount, CityEnterprise cityEnterprise, JPanel userProcessContainer)
    {
        initComponents();
        this.internationalNetwork = internationalNetwork;
        this.userAccount = userAccount;
        this.cityEnterprise =cityEnterprise;
        txtUID.setEnabled(false);
        btnSearch.setEnabled(false);
        btnViewProfile.setEnabled(false);
        this.userProcessContainer = userProcessContainer;
        populateCountryList();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        lblName1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPatients = new javax.swing.JTable();
        lblName3 = new javax.swing.JLabel();
        cmbCountryList = new javax.swing.JComboBox();
        lblName2 = new javax.swing.JLabel();
        txtUID = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        lblResult = new javax.swing.JLabel();
        btnViewProfile = new javax.swing.JButton();
        btnGetPatientProfiles = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/baseClasses/healtech logo.PNG"))); // NOI18N

        lblName1.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        lblName1.setForeground(new java.awt.Color(0, 153, 51));
        lblName1.setText("                                                Patient Profiles");

        tblPatients.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tblPatients.setForeground(new java.awt.Color(0, 153, 51));
        tblPatients.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "UID", "Name", "Nationality", "Primary Doctor"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblPatients);
        if (tblPatients.getColumnModel().getColumnCount() > 0) {
            tblPatients.getColumnModel().getColumn(0).setResizable(false);
            tblPatients.getColumnModel().getColumn(1).setResizable(false);
            tblPatients.getColumnModel().getColumn(2).setResizable(false);
            tblPatients.getColumnModel().getColumn(3).setResizable(false);
        }

        lblName3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblName3.setForeground(new java.awt.Color(0, 153, 51));
        lblName3.setText("Select Country");

        cmbCountryList.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        cmbCountryList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbCountryListActionPerformed(evt);
            }
        });

        lblName2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblName2.setForeground(new java.awt.Color(0, 153, 51));
        lblName2.setText("Search by Citizen ID");

        txtUID.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        btnSearch.setBackground(new java.awt.Color(255, 255, 255));
        btnSearch.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnSearch.setForeground(new java.awt.Color(0, 153, 0));
        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        lblResult.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblResult.setForeground(new java.awt.Color(0, 153, 51));

        btnViewProfile.setBackground(new java.awt.Color(255, 255, 255));
        btnViewProfile.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnViewProfile.setForeground(new java.awt.Color(0, 153, 0));
        btnViewProfile.setText("View Profile");
        btnViewProfile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewProfileActionPerformed(evt);
            }
        });

        btnGetPatientProfiles.setBackground(new java.awt.Color(255, 255, 255));
        btnGetPatientProfiles.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnGetPatientProfiles.setForeground(new java.awt.Color(0, 153, 0));
        btnGetPatientProfiles.setText("Get Patient Profiles");
        btnGetPatientProfiles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGetPatientProfilesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lblName1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(121, 121, 121))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(209, 209, 209)
                                        .addComponent(lblResult, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblName3, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(cmbCountryList, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(lblName2, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(txtUID, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(30, 30, 30)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnViewProfile, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 55, Short.MAX_VALUE)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 668, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(69, 69, 69))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(844, 844, 844)
                                .addComponent(btnGetPatientProfiles, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addComponent(jLabel1))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(lblName1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(79, 637, Short.MAX_VALUE)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 633, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(54, 54, 54)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblName3)
                                    .addComponent(cmbCountryList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnSearch))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblName2)
                                    .addComponent(txtUID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnViewProfile))
                                .addGap(26, 26, 26)
                                .addComponent(lblResult, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addComponent(btnGetPatientProfiles)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cmbCountryListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbCountryListActionPerformed
        // TODO add your handling code here:
        txtUID.setEnabled(true);
        btnSearch.setEnabled(true);
        btnViewProfile.setEnabled(true);
    }//GEN-LAST:event_cmbCountryListActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        DefaultTableModel dtm = (DefaultTableModel) tblPatients.getModel();
        dtm.setRowCount(0);
        System.out.println("in the search button method in add new doctor panel");
        CountryEnterprise countryEnterprise = (CountryEnterprise) cmbCountryList.getSelectedItem();
        System.out.println("Country enterprise sel" + countryEnterprise);
        int UID = Integer.parseInt(txtUID.getText());
        System.out.println(UID);
        StateEnterprise stateEnterprise = null;
        CityEnterprise cityEnterprise = null;
        Citizen citizen = null;
        HospitalEnterprise hospitalEnterprise = null;

        CountryEnterprise countryEnt = null;
        CitizenOrganization citizenOrganization = null;
        DoctorOrganization doctorOrganization = null;

        for (Enterprise country : internationalNetwork.getEnterpriseDirectory().getEnterpriseList()) {
            if (country.getClass() == CountryEnterprise.class) {
                countryEnt = (CountryEnterprise) country;

                if (countryEnt.getName().equals(countryEnterprise.getName())) {
                    System.out.println("Country found: " + countryEnt);
                    countryEnterprise = countryEnt;
                    for (Enterprise state : countryEnterprise.getCountryNetwork().getEnterpriseDirectory().getEnterpriseList()) {
                        if (state.getClass() == StateEnterprise.class) {
                            stateEnterprise = (StateEnterprise) state;

                            for (Enterprise city : stateEnterprise.getStateNetwork().getEnterpriseDirectory().getEnterpriseList()) {
                                cityEnterprise = (CityEnterprise) city;
                                System.out.println(cityEnterprise.getOrganizationDirectory().getOrganizationList());
                                for (Organization organization : cityEnterprise.getOrganizationDirectory().getOrganizationList()) {
                                    if (organization.getClass() == CitizenOrganization.class) {
                                        citizenOrganization = (CitizenOrganization) organization;
                                        System.out.println("CItizen org list size: " + citizenOrganization.getPersonDirectory().getPersonList().size());
                                        for (Person person : citizenOrganization.getPersonDirectory().getPersonList()) {
                                            if (person.getClass() == Citizen.class) {
                                                citizen = (Citizen) person;
                                                //System.out.println("" + cityEnterprise.getName() + " " + person.getName().getFirstName() + Citizen.getUID() + citizen.getUID() +  " " + cityEnterprise.getPersonDirectory().getPersonList().size());
                                                if (citizen.getUID() == UID) {
                                                    finalCitizen = citizen;
                                                    lblResult.setText("Profile Found: " + finalCitizen.getName().getFirstName());
                                                    
//                                                    for (Organization doctorOrg : hospitalEnterprise.getOrganizationDirectory().getOrganizationList()) {
//                                                        if (doctorOrg.getClass() == DoctorOrganization.class) {
//                                                            doctorOrganization = (DoctorOrganization) doctorOrg;
//
//                                                            Doctor doctor = new Doctor();
//                                                            doctor.setHighestDegree(txtHightestDegree1.getText());
//                                                            doctor.setSpecialization(txtSpecialization.getText());
//                                                            doctor.setUID(UID);
//
//                                                        }
//                                                    }
                                                }
                                            }
                                        }
                                    }

                                }
                                PatientOrganization patientOrganization = null;
                                Patient patient = null;
                                
                                for(Enterprise hospitals: cityEnterprise.getCityNetwork().getEnterpriseDirectory().getEnterpriseList())
                                {
                                    if(hospitals.getClass() == HospitalEnterprise.class)
                                    {
                                        hospitalEnterprise = (HospitalEnterprise) hospitals;
                                    }
                                    
                                    for(Organization org: hospitalEnterprise.getOrganizationDirectory().getOrganizationList())
                                    {
                                        if(org.getClass() == PatientOrganization.class)
                                        {
                                            patientOrganization = (PatientOrganization) org;
                                            System.out.println("Printing from finding global patients: " + patientOrganization.getUserAccountDirectory().getUserAccountList());
                                            for(UserAccount ua: patientOrganization.getUserAccountDirectory().getUserAccountList())
                                            {
                                                patient = (Patient) ua.getPerson();
                                                String countryName = ((CountryEnterprise)cmbCountryList.getSelectedItem()).getName();
                                                
                                                System.out.println("Printing from Finding Global Patients:patient: " + patient + " ****** "+ finalCitizen);
                                                if(patient.getNationality().equals(finalCitizen.getNationality()) && patient.getUID()  == finalCitizen.getUID())
                                                {
                                                    Object[] row = new Object[4];
                                                    row[0] = patient;
                                                    row[1] = patient.getName().getFirstName() + " " + patient.getName().getLastName();
                                                    row[2] = patient.getNationality();
                                                    row[3] = patient.getPrimaryDoctor();
                                                    
                                                    dtm.addRow(row);
                                                }
                                            }
                                        }
                                    }
                                    
                                    
                                }

                            }
                        }
                    }
                }
            }
        }

    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnViewProfileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewProfileActionPerformed
        // TODO add your handling code here:
         JFrame frame = new JFrame(finalCitizen.getName().getFirstName() + " " + finalCitizen.getName().getLastName());
        frame.setSize(1200, 1000);

        frame.setVisible(true);
        frame.add(new EditCitizenDetails(internationalNetwork, finalCitizen, null));

        //jframe.add(new EditCitizenDetails());
    }//GEN-LAST:event_btnViewProfileActionPerformed

    private void btnGetPatientProfilesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGetPatientProfilesActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblPatients.getSelectedRow();
        System.out.println("selectedROw: " + selectedRow);
        if(selectedRow > -1)
        {
             //JPanel userProcessContainer = new JPanel();
        userProcessContainer.setLayout(new CardLayout());
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        userProcessContainer.add(new ViewPatientProfiles((Patient) tblPatients.getValueAt(selectedRow, 0),userProcessContainer));
        layout.next(userProcessContainer);
        
        }
        else
            JOptionPane.showMessageDialog(this, "Please click an entry from table to proceed", "Error", JOptionPane.ERROR_MESSAGE);
        
        
        //jSplitPane1.setRightComponent(userProcessContainer);
    }//GEN-LAST:event_btnGetPatientProfilesActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGetPatientProfiles;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnViewProfile;
    private javax.swing.JComboBox cmbCountryList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblName1;
    private javax.swing.JLabel lblName2;
    private javax.swing.JLabel lblName3;
    private javax.swing.JLabel lblResult;
    private javax.swing.JTable tblPatients;
    private javax.swing.JTextField txtUID;
    // End of variables declaration//GEN-END:variables

//    private void populatePatientTable()
//    {
//        DefaultTableModel dtm = (DefaultTableModel) tblPatients.getModel();
//        dtm.setRowCount(0);
//        HospitalEnterprise hospitalEnterprise =  null;
//        PatientOrganization patientOrganization = null;
//        
//        for(Enterprise hospital: cityEnterprise.getCityNetwork().getEnterpriseDirectory().getEnterpriseList())
//        {
//            if(hospital.getClass() == HospitalEnterprise.class)
//            {
//                hospitalEnterprise = (HospitalEnterprise) hospital;
//                
//                for(Organization organization:hospitalEnterprise.getOrganizationDirectory().getOrganizationList())
//                {
//                    if(organization.getClass() == PatientOrganization.class)
//                    {
//                        patientOrganization = (PatientOrganization) organization;
//                        for(UserAccount userAccount: patientOrganization.getUserAccountDirectory().getUserAccountList())
//                        {
//                            Patient patient = (Patient) userAccount.getPerson();
//                            Object[] row = new Object[3];
//                            row[0] = patient;
//                            row[1] = userAccount.getPerson().getName().getFirstName() + " " + userAccount.getPerson().getName().getFirstName();
//                            row[2] = patient.getPrimaryDoctor();
//                            dtm.addRow(row);
//                        }
//                    }
//                }
//            }
//        }
//        
//    }
    
    private void populateCountryList() {
        cmbCountryList.removeAllItems();
        CountryEnterprise countryEnterprise;

        for (Enterprise country : internationalNetwork.getEnterpriseDirectory().getEnterpriseList()) {
            cmbCountryList.addItem((CountryEnterprise) country);
        }

    }
}
