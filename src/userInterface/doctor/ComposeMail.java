/*
 * Copyright (C) 2014 Abhishek
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
package userInterface.doctor;

import baseClasses.enterprise.CityEnterprise;
import baseClasses.enterprise.CountryEnterprise;
import baseClasses.enterprise.Enterprise;
import baseClasses.enterprise.HospitalEnterprise;
import baseClasses.enterprise.PharmaceuticalCompanyEnterprise;
import baseClasses.enterprise.PharmacyEnterprise;
import baseClasses.enterprise.StateEnterprise;
import baseClasses.network.Network;
import baseClasses.organization.Organization;
import baseClasses.organization.DoctorOrganization;
import baseClasses.organization.PatientOrganization;
import baseClasses.userAccount.UserAccount;
import workQueue.DoctorMail;
import workQueue.HospitalMail;
import workQueue.PatientMail;

import workQueue.PharmaceuticalCompanyMail;
import workQueue.PharmacyMail;

/**
 *
 * @author Abhishek
 */
public class ComposeMail extends javax.swing.JPanel {

    /**
     * Creates new form ComposeMail
     */
    private Network internationalNetwork;
    private DoctorOrganization doctorOrganization = null;
    private PharmaceuticalCompanyEnterprise pharmaceuticalCompanyEnterprise = null;
    private PharmacyEnterprise pharmacyEnterprise = null;
    private HospitalEnterprise hospitalEnterprise = null;
    private PatientOrganization patientOrganization = null;
    private CityEnterprise cityEnterprise = null;
    private UserAccount userAccount = null;

    public ComposeMail(Network internationalNetwork, UserAccount userAccount) {
        initComponents();
        this.internationalNetwork = internationalNetwork;
        this.userAccount = userAccount;

        populateCountryList();
        cmbStateList.setEnabled(false);
        cmbCityList.setEnabled(false);
        cmbRole.setEnabled(false);
        cmbPerson.setEnabled(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtSubject = new javax.swing.JTextField();
        lblName3 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        btnClear = new javax.swing.JButton();
        lblName1 = new javax.swing.JLabel();
        cmbRole = new javax.swing.JComboBox();
        lblSelectCountry4 = new javax.swing.JLabel();
        cmbCountryList = new javax.swing.JComboBox();
        cmbStateList = new javax.swing.JComboBox();
        lblSelectCountry1 = new javax.swing.JLabel();
        lblSelectCountry2 = new javax.swing.JLabel();
        cmbCityList = new javax.swing.JComboBox();
        btnSend = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        taBody = new javax.swing.JTextArea();
        lblSelectCountry3 = new javax.swing.JLabel();
        cmbPerson = new javax.swing.JComboBox();
        btnLoadContacts = new javax.swing.JButton();
        calendar = new com.toedter.calendar.JCalendar();

        setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/baseClasses/healtech logo.PNG"))); // NOI18N

        txtSubject.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtSubject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSubjectActionPerformed(evt);
            }
        });

        lblName3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblName3.setForeground(new java.awt.Color(0, 153, 51));
        lblName3.setText("To");

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 153, 51));
        jLabel9.setText("Subject");

        btnClear.setBackground(new java.awt.Color(255, 255, 255));
        btnClear.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnClear.setForeground(new java.awt.Color(0, 153, 0));
        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        lblName1.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        lblName1.setForeground(new java.awt.Color(0, 153, 51));
        lblName1.setText("                                     Compose Mail");

        cmbRole.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        cmbRole.setForeground(new java.awt.Color(0, 153, 51));
        cmbRole.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Doctor", "Pharmacy", "Pharmaceutical Company", "Hospital", "Patient" }));
        cmbRole.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbRoleActionPerformed(evt);
            }
        });

        lblSelectCountry4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblSelectCountry4.setForeground(new java.awt.Color(0, 153, 51));
        lblSelectCountry4.setText("Select Country:");

        cmbCountryList.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        cmbCountryList.setForeground(new java.awt.Color(0, 153, 51));
        cmbCountryList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbCountryListActionPerformed(evt);
            }
        });

        cmbStateList.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        cmbStateList.setForeground(new java.awt.Color(0, 153, 51));
        cmbStateList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbStateListActionPerformed(evt);
            }
        });

        lblSelectCountry1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblSelectCountry1.setForeground(new java.awt.Color(0, 153, 51));
        lblSelectCountry1.setText("Select State:");

        lblSelectCountry2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblSelectCountry2.setForeground(new java.awt.Color(0, 153, 51));
        lblSelectCountry2.setText("Role:");

        cmbCityList.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        cmbCityList.setForeground(new java.awt.Color(0, 153, 51));
        cmbCityList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbCityListActionPerformed(evt);
            }
        });

        btnSend.setBackground(new java.awt.Color(255, 255, 255));
        btnSend.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnSend.setForeground(new java.awt.Color(0, 153, 0));
        btnSend.setText("Send");
        btnSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(0, 153, 51));
        jLabel10.setText("Body");

        taBody.setColumns(20);
        taBody.setRows(5);
        jScrollPane1.setViewportView(taBody);

        lblSelectCountry3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblSelectCountry3.setForeground(new java.awt.Color(0, 153, 51));
        lblSelectCountry3.setText("Select City:");

        cmbPerson.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        cmbPerson.setForeground(new java.awt.Color(0, 153, 51));

        btnLoadContacts.setBackground(new java.awt.Color(255, 255, 255));
        btnLoadContacts.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnLoadContacts.setForeground(new java.awt.Color(0, 153, 0));
        btnLoadContacts.setText("Load Contacts");
        btnLoadContacts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadContactsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(226, 226, 226)
                .addComponent(btnClear)
                .addGap(289, 289, 289)
                .addComponent(btnSend)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1))
            .addGroup(layout.createSequentialGroup()
                .addGap(61, 61, 61)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblName3)
                        .addGap(195, 195, 195)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblSelectCountry4)
                                .addGap(40, 40, 40)
                                .addComponent(cmbCountryList, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(lblSelectCountry1)
                                    .addGap(65, 65, 65)
                                    .addComponent(cmbStateList, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(lblSelectCountry2)
                                        .addComponent(lblSelectCountry3))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(cmbRole, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(cmbCityList, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(cmbPerson, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnLoadContacts, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                        .addGap(101, 101, 101)
                        .addComponent(calendar, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel9)
                            .addGap(170, 170, 170)
                            .addComponent(txtSubject, javax.swing.GroupLayout.PREFERRED_SIZE, 735, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblName1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addGap(195, 195, 195)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 735, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(0, 484, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(lblName1)
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblName3)
                        .addGap(277, 277, 277))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(cmbCountryList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblSelectCountry4))
                                .addGap(30, 30, 30)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(3, 3, 3)
                                        .addComponent(lblSelectCountry1))
                                    .addComponent(cmbStateList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(27, 27, 27)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(cmbCityList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblSelectCountry3)))
                            .addComponent(calendar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(9, 9, 9)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmbRole, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblSelectCountry2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnLoadContacts)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cmbPerson, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(txtSubject, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnClear)
                            .addComponent(btnSend))
                        .addGap(27, 27, 27))))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtSubjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSubjectActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSubjectActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        // TODO add your handling code here:
        txtSubject.setText("");
        taBody.setText("");

    }//GEN-LAST:event_btnClearActionPerformed

    private void cmbCountryListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbCountryListActionPerformed
        // TODO add your handling code here:
        cmbStateList.setEnabled(true);
        populateStateList((CountryEnterprise) cmbCountryList.getSelectedItem());

    }//GEN-LAST:event_cmbCountryListActionPerformed

    private void cmbStateListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbStateListActionPerformed
        // TODO add your handling code here:
        cmbCityList.setEnabled(true);
        populateCityList((StateEnterprise) cmbStateList.getSelectedItem());

    }//GEN-LAST:event_cmbStateListActionPerformed

    private void cmbCityListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbCityListActionPerformed
        // TODO add your handling code here:
        cmbRole.setEnabled(true);


    }//GEN-LAST:event_cmbCityListActionPerformed

    private void btnSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendActionPerformed
        // TODO add your handling code here:
//        if ((txtSubject.getText().equals(""))) {
//            int result = JOptionPane.showConfirmDialog(this, "Do you want to send the mail without a subject?", "Confirm", JOptionPane.YES_NO_OPTION);
//            if (result == JOptionPane.YES_OPTION)
            {
                cityEnterprise = (CityEnterprise) cmbCityList.getSelectedItem();
                

                System.out.println("cmb role: "  + cmbRole.getSelectedItem());
                
                if(((String) cmbRole.getSelectedItem()).equals("Doctor")) {
                    DoctorMail doctorMail = new DoctorMail();
                    UserAccount receiver = (UserAccount) cmbPerson.getSelectedItem();
                    doctorMail.setReceiver(receiver);
                    doctorMail.setSubject(txtSubject.getText());
                    doctorMail.setMessage(taBody.getText());
                    doctorMail.setSender(userAccount);
                    doctorMail.setRequestDate(calendar.getDate());

                    System.out.println("PRinting from doctor compose mail" + receiver.getWorkQueue().getWorkRequestList());
                    receiver.getWorkQueue().getWorkRequestList().add(doctorMail);
                    System.out.println("PRinting from doctor compose mail" +userAccount.getWorkQueue().getWorkRequestList());
                    userAccount.getWorkQueue().getWorkRequestList().add(doctorMail);

                } else if(((String) cmbRole.getSelectedItem()).equals("Patient")) {
                    PatientMail patientMail = new PatientMail();
                    UserAccount receiver = (UserAccount) cmbPerson.getSelectedItem();
                    patientMail.setReceiver(receiver);
                    patientMail.setSubject(txtSubject.getText());
                    patientMail.setMessage(taBody.getText());
                    patientMail.setSender(userAccount);
                    patientMail.setRequestDate(calendar.getDate());

                    System.out.println("PRinting from doctor compose mail" + receiver.getWorkQueue().getWorkRequestList());
                                        System.out.println("PRinting from doctor compose mail" +userAccount.getWorkQueue().getWorkRequestList());
                    
                    receiver.getWorkQueue().getWorkRequestList().add(patientMail);
                    userAccount.getWorkQueue().getWorkRequestList().add(patientMail);
                } else if(((String) cmbRole.getSelectedItem()).equals("Hospital")) {
                    HospitalMail hospitalMail = new HospitalMail();
                    HospitalEnterprise receiver = (HospitalEnterprise) cmbPerson.getSelectedItem();
                    hospitalMail.setReceiver(receiver);
                    hospitalMail.setSubject(txtSubject.getText());
                    hospitalMail.setMessage(taBody.getText());
                    hospitalMail.setSender(userAccount);
                    hospitalMail.setRequestDate(calendar.getDate());

                    receiver.getWorkQueue().getWorkRequestList().add(hospitalMail);
                    userAccount.getWorkQueue().getWorkRequestList().add(hospitalMail);

                } else if(((String) cmbRole.getSelectedItem()).equals("Pharmacy")) {
                    PharmacyMail pharmacyMail = new PharmacyMail();
                    PharmacyEnterprise receiver = (PharmacyEnterprise) cmbCityList.getSelectedItem();
                    pharmacyMail.setReceiver(receiver);
                    pharmacyMail.setSubject(txtSubject.getText());
                    pharmacyMail.setMessage(taBody.getText());
                    pharmacyMail.setSender(userAccount);
                    pharmacyMail.setRequestDate(calendar.getDate());

                    receiver.getWorkQueue().getWorkRequestList().add(pharmacyMail);
                    userAccount.getWorkQueue().getWorkRequestList().add(pharmacyMail);
                } else if(((String) cmbRole.getSelectedItem()).equals("Pharmaceutical Company")) {
                    PharmaceuticalCompanyMail pharmaceuticalCompanyMail = new PharmaceuticalCompanyMail();
                    PharmaceuticalCompanyEnterprise receiver = (PharmaceuticalCompanyEnterprise) cmbPerson.getSelectedItem();
                    pharmaceuticalCompanyMail.setReceiver(receiver);
                    pharmaceuticalCompanyMail.setSubject(txtSubject.getText());
                    pharmaceuticalCompanyMail.setMessage(taBody.getText());
                    pharmaceuticalCompanyMail.setSender(userAccount);
                    pharmaceuticalCompanyMail.setRequestDate(calendar.getDate());

                    receiver.getWorkQueue().getWorkRequestList().add(pharmaceuticalCompanyMail);
                    userAccount.getWorkQueue().getWorkRequestList().add(pharmaceuticalCompanyMail);
                }
            }
      //  }


    }//GEN-LAST:event_btnSendActionPerformed

    private void cmbRoleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbRoleActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_cmbRoleActionPerformed

    private void btnLoadContactsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadContactsActionPerformed
        // TODO add your handling code here:
        cmbPerson.setEnabled(true);
        cmbPerson.removeAllItems();

        cityEnterprise = (CityEnterprise) cmbCityList.getSelectedItem();

        if (((String) cmbRole.getSelectedItem()).equals("Doctor")) {
            System.out.println("printing from compose mail: " + cityEnterprise.getCityNetwork().getEnterpriseDirectory().getEnterpriseList());
            for (Enterprise hospital : cityEnterprise.getCityNetwork().getEnterpriseDirectory().getEnterpriseList()) {
                if (hospital.getClass() == HospitalEnterprise.class) {
                    hospitalEnterprise = (HospitalEnterprise) hospital;
                    System.out.println("org" + hospitalEnterprise.getOrganizationDirectory().getOrganizationList());
                    for (Organization org : hospitalEnterprise.getOrganizationDirectory().getOrganizationList()) {
                        if (org.getClass() == DoctorOrganization.class) {
                            doctorOrganization = (DoctorOrganization) org;
                            System.out.println("user account: " + doctorOrganization.getUserAccountDirectory().getUserAccountList());
                            for (UserAccount ua : doctorOrganization.getUserAccountDirectory().getUserAccountList()) {
                                cmbPerson.addItem(ua);
                            }
                        }
                    }

                }
            }
        } else if (((String) cmbRole.getSelectedItem()).equals("Pharmaceutical Company")) {
           for (Enterprise hospital : cityEnterprise.getCityNetwork().getEnterpriseDirectory().getEnterpriseList()) {
                if (hospital.getClass() == PharmaceuticalCompanyEnterprise.class) {
                    pharmaceuticalCompanyEnterprise = (PharmaceuticalCompanyEnterprise) hospital;
                    cmbPerson.addItem(pharmaceuticalCompanyEnterprise);

                }
            }
        } else if (((String) cmbRole.getSelectedItem()).equals("Pharmacy")) {
 for (Enterprise hospital : cityEnterprise.getCityNetwork().getEnterpriseDirectory().getEnterpriseList()) {
                if (hospital.getClass() == PharmacyEnterprise.class) {
                    pharmacyEnterprise = (PharmacyEnterprise) hospital;
                    cmbPerson.addItem(pharmacyEnterprise);

                }
            }
        } else if (((String) cmbRole.getSelectedItem()).equals("Hospital")) {
            for (Enterprise hospital : cityEnterprise.getCityNetwork().getEnterpriseDirectory().getEnterpriseList()) {
                if (hospital.getClass() == HospitalEnterprise.class) {
                    hospitalEnterprise = (HospitalEnterprise) hospital;
                    cmbPerson.addItem(hospitalEnterprise);

                }
            }
        } else if (((String) cmbRole.getSelectedItem()).equals("Patient")) {
            for (Enterprise hospital : cityEnterprise.getCityNetwork().getEnterpriseDirectory().getEnterpriseList()) {
                if (hospital.getClass() == HospitalEnterprise.class) {
                    hospitalEnterprise = (HospitalEnterprise) hospital;

                    for (Organization org : hospitalEnterprise.getOrganizationDirectory().getOrganizationList()) {
                        if (org.getClass() == PatientOrganization.class) {
                            patientOrganization = (PatientOrganization) org;

                            for (UserAccount ua : patientOrganization.getUserAccountDirectory().getUserAccountList()) {
                                cmbPerson.addItem(ua);
                            }
                        }
                    }

                }
            }
        }

    }//GEN-LAST:event_btnLoadContactsActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnLoadContacts;
    private javax.swing.JButton btnSend;
    private com.toedter.calendar.JCalendar calendar;
    private javax.swing.JComboBox cmbCityList;
    private javax.swing.JComboBox cmbCountryList;
    private javax.swing.JComboBox cmbPerson;
    private javax.swing.JComboBox cmbRole;
    private javax.swing.JComboBox cmbStateList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblName1;
    private javax.swing.JLabel lblName3;
    private javax.swing.JLabel lblSelectCountry1;
    private javax.swing.JLabel lblSelectCountry2;
    private javax.swing.JLabel lblSelectCountry3;
    private javax.swing.JLabel lblSelectCountry4;
    private javax.swing.JTextArea taBody;
    private javax.swing.JTextField txtSubject;
    // End of variables declaration//GEN-END:variables
private void populateCountryList() {
        cmbCountryList.removeAllItems();
        CountryEnterprise countryEnterprise;

        for (Enterprise country : internationalNetwork.getEnterpriseDirectory().getEnterpriseList()) {
            cmbCountryList.addItem((CountryEnterprise) country);
        }

    }

    private void populateStateList(CountryEnterprise countryEnterprise) {

        cmbStateList.removeAllItems();

        for (Enterprise state : countryEnterprise.getCountryNetwork().getEnterpriseDirectory().getEnterpriseList()) {
            if (state.getClass() == StateEnterprise.class) {
                cmbStateList.addItem((StateEnterprise) state);
            }
        }

    }

    private void populateCityList(StateEnterprise stateEnterprise) {
        cmbCityList.removeAllItems();

        System.out.println("State Enterprise List size" + stateEnterprise.getStateNetwork().getEnterpriseDirectory().getEnterpriseList().size());
        for (Enterprise city : stateEnterprise.getStateNetwork().getEnterpriseDirectory().getEnterpriseList()) {
            System.out.println("City Enterprise" + city);
            cmbCityList.addItem((CityEnterprise) city);

        }
    }

}
