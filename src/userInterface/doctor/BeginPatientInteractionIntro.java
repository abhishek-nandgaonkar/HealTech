/*
 * Copyright (C) 2014 Abhishek
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
package userInterface.doctor;

import baseClasses.doctor.Doctor;
import baseClasses.enterprise.CityEnterprise;
import baseClasses.enterprise.Enterprise;
import baseClasses.enterprise.HospitalEnterprise;
import baseClasses.organization.DoctorOrganization;
import baseClasses.organization.LabOrganization;
import baseClasses.organization.Organization;
import baseClasses.patient.Patient;
import baseClasses.userAccount.UserAccount;
import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import workQueue.LabWorkRequest;

/**
 *
 * @author Abhishek
 */
public class BeginPatientInteractionIntro extends javax.swing.JPanel {

    /**
     * Creates new form ManagePatients
     */
    private CityEnterprise inCityEnterprise;
    private Organization inOrganization;
    private UserAccount userAccount;
    private JPanel userProcessContainer;
    private Enterprise inEnterprise;
    LabWorkRequest labWorkRequest;
    HospitalEnterprise hospitalEnterprise;
    DoctorOrganization doctorOrganization;

    public BeginPatientInteractionIntro(CityEnterprise inCityEnterprise, Organization inOrganization, UserAccount userAccount, JPanel userProcessContainer, Enterprise inEnterprise) {
        initComponents();
        this.inCityEnterprise = inCityEnterprise;
        this.inOrganization = inOrganization;
        this.userAccount = userAccount;
        this.userProcessContainer = userProcessContainer;
        this.inEnterprise = inEnterprise;

        if (inEnterprise.getClass() == HospitalEnterprise.class) {
            hospitalEnterprise = (HospitalEnterprise) inEnterprise;
        }

        if (inOrganization.getClass() == DoctorOrganization.class) {
            doctorOrganization = (DoctorOrganization) inOrganization;
        }

        populatePatientTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblName1 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPatients = new javax.swing.JTable();
        btnRequestPatientProfile = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        lblName1.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        lblName1.setForeground(new java.awt.Color(0, 153, 51));
        lblName1.setText("                                  Begin Patient Interaction");

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/baseClasses/healtech logo.PNG"))); // NOI18N

        tblPatients.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tblPatients.setForeground(new java.awt.Color(0, 153, 51));
        tblPatients.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "UID", "Name", "Nationality"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblPatients);
        if (tblPatients.getColumnModel().getColumnCount() > 0) {
            tblPatients.getColumnModel().getColumn(0).setResizable(false);
            tblPatients.getColumnModel().getColumn(1).setResizable(false);
            tblPatients.getColumnModel().getColumn(2).setResizable(false);
        }

        btnRequestPatientProfile.setBackground(new java.awt.Color(255, 255, 255));
        btnRequestPatientProfile.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnRequestPatientProfile.setForeground(new java.awt.Color(0, 153, 0));
        btnRequestPatientProfile.setText("Request Patient Profile");
        btnRequestPatientProfile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRequestPatientProfileActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(227, 227, 227)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 781, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(213, 213, 213)
                        .addComponent(btnRequestPatientProfile, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 427, Short.MAX_VALUE)
                .addComponent(jLabel1))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(lblName1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGap(121, 121, 121)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(115, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 576, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(45, 45, 45)
                        .addComponent(btnRequestPatientProfile)
                        .addGap(30, 30, 30))))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(11, 11, 11)
                    .addComponent(lblName1)
                    .addContainerGap(742, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnRequestPatientProfileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRequestPatientProfileActionPerformed
        // TODO add your handling code here:3
        int selectedIndex = tblPatients.getSelectedRow();
        
        if(selectedIndex > -1)
        {
            Patient patient = (Patient) tblPatients.getValueAt(selectedIndex, 0);
        Doctor doctor = (Doctor) userAccount.getPerson();
        JPanel userProcessContainer = new JPanel();
        userProcessContainer.setLayout(new CardLayout());
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();

        labWorkRequest = new LabWorkRequest();
        labWorkRequest.setPatient(patient);
        System.out.println("Printing from begin patient interaction" + patient);
        labWorkRequest.setMessage("Kindly provide Patient Profile");
        labWorkRequest.setSender(userAccount);
        labWorkRequest.setStatus("Request Submitted");
        
        //HospitalEnterprise hospitalEnterprise = null;
        LabOrganization labOrganization = null;

        if (inEnterprise.getClass() == HospitalEnterprise.class) {
            hospitalEnterprise = (HospitalEnterprise) inEnterprise;
            for (Organization org : hospitalEnterprise.getOrganizationDirectory().getOrganizationList()) {
                if (org.getClass() == LabOrganization.class) {
                    labOrganization = (LabOrganization) org;

                    System.out.println("Printing from Begin Patient Interaction");
                    System.out.println(labOrganization.getWorkQueue().getWorkRequestList().size());
                    System.out.println(labOrganization);
                    System.out.println(hospitalEnterprise);
                }
            }
        }
        labOrganization.getWorkQueue().getWorkRequestList().add(labWorkRequest);
        doctorOrganization.getWorkQueue().getWorkRequestList().add(labWorkRequest);
        System.out.println("Printing from Begin Patient Interaction");
        System.out.println(hospitalEnterprise.getOrganizationDirectory().getOrganizationList());
        System.out.println(labOrganization.getWorkQueue().getWorkRequestList().size());
        System.out.println(labOrganization);
        System.out.println(hospitalEnterprise);
        layout.next(userProcessContainer);
        }
        else
            JOptionPane.showMessageDialog(this, "Please select an item to proceed", "Error", JOptionPane.ERROR_MESSAGE);
        
        
    }//GEN-LAST:event_btnRequestPatientProfileActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnRequestPatientProfile;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblName1;
    private javax.swing.JTable tblPatients;
    // End of variables declaration//GEN-END:variables

    private void populatePatientTable() {
        DefaultTableModel dtm = (DefaultTableModel) tblPatients.getModel();
        dtm.setRowCount(0);

        Doctor doctor = (Doctor) userAccount.getPerson();

        ArrayList<Patient> patientList = doctor.getPatientList();

        for (Patient patient : doctor.getPatientList()) {
            Object[] row = new Object[3];
            row[0] = patient;
            row[1] = patient.getName().getFirstName() + " " + patient.getName().getLastName();
            row[2] = patient.getNationality();
            //row[3] = labWorkRequest.getStatus();
            dtm.addRow(row);
        }

    }
}
