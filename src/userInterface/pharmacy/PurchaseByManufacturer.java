/*
 * Copyright (C) 2014 Abhishek
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
package userInterface.pharmacy;

import baseClasses.Drug;
import baseClasses.enterprise.CityEnterprise;
import baseClasses.enterprise.CountryEnterprise;
import baseClasses.enterprise.Enterprise;
import baseClasses.enterprise.PharmaceuticalCompanyEnterprise;
import baseClasses.enterprise.PharmacyEnterprise;
import baseClasses.enterprise.StateEnterprise;
import baseClasses.medicine.Medicine;
import baseClasses.network.Network;
import baseClasses.order.Order;
import baseClasses.order.OrderItem;
import baseClasses.organization.ManufacturingOrganization;
import baseClasses.organization.Organization;
import baseClasses.userAccount.UserAccount;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;
import workQueue.MedicineOrderRequest;

/**
 *
 * @author Abhishek
 */
public class PurchaseByManufacturer extends javax.swing.JPanel {

    /**
     * Creates new form PurchaseNewDrugs
     */
    Network internationalNetwork;
    private UserAccount userAccount;
    float  total = 0;
    private ArrayList<Medicine> selectedMeds;
    private PharmacyEnterprise pharmacyEnterprise;

    public PurchaseByManufacturer(Network internationalNetwork, UserAccount userAccount, PharmacyEnterprise pharmacyEnterprise) {
        initComponents();
        this.internationalNetwork = internationalNetwork;
        this.pharmacyEnterprise = pharmacyEnterprise;
        this.userAccount = userAccount;
        selectedMeds = new ArrayList();
        populateCountryList();
        cmbManufacturerList.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblName1 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        btnPlaceOrder = new javax.swing.JButton();
        lblSelectCountry6 = new javax.swing.JLabel();
        lblSelectCountry7 = new javax.swing.JLabel();
        cmbManufacturerList = new javax.swing.JComboBox();
        lblTotal = new javax.swing.JLabel();
        btnCopy = new javax.swing.JButton();
        txtQuantity = new javax.swing.JTextField();
        lblName3 = new javax.swing.JLabel();
        cmbCountryList = new javax.swing.JComboBox();
        btnGo = new javax.swing.JButton();
        lblTotalNew = new javax.swing.JLabel();
        btnTotal = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDrugs2 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblDrugs = new javax.swing.JTable();

        setBackground(new java.awt.Color(255, 255, 255));

        lblName1.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        lblName1.setForeground(new java.awt.Color(0, 153, 51));
        lblName1.setText("Find Medicine By Drug Name");

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/baseClasses/healtech logo.PNG"))); // NOI18N

        btnPlaceOrder.setBackground(new java.awt.Color(255, 255, 255));
        btnPlaceOrder.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnPlaceOrder.setForeground(new java.awt.Color(0, 153, 0));
        btnPlaceOrder.setText("Place Order");
        btnPlaceOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlaceOrderActionPerformed(evt);
            }
        });

        lblSelectCountry6.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblSelectCountry6.setForeground(new java.awt.Color(0, 153, 51));
        lblSelectCountry6.setText("Select Manufacturer: ");

        lblSelectCountry7.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblSelectCountry7.setForeground(new java.awt.Color(0, 153, 51));
        lblSelectCountry7.setText("Enter Quantity");

        cmbManufacturerList.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        cmbManufacturerList.setForeground(new java.awt.Color(0, 153, 51));
        cmbManufacturerList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbManufacturerListActionPerformed(evt);
            }
        });

        lblTotal.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblTotal.setForeground(new java.awt.Color(0, 153, 51));

        btnCopy.setBackground(new java.awt.Color(255, 255, 255));
        btnCopy.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnCopy.setForeground(new java.awt.Color(0, 153, 0));
        btnCopy.setText(">>");
        btnCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCopyActionPerformed(evt);
            }
        });

        txtQuantity.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtQuantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtQuantityActionPerformed(evt);
            }
        });

        lblName3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblName3.setForeground(new java.awt.Color(0, 153, 51));
        lblName3.setText("Select Country");

        cmbCountryList.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        cmbCountryList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbCountryListActionPerformed(evt);
            }
        });

        btnGo.setBackground(new java.awt.Color(255, 255, 255));
        btnGo.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnGo.setForeground(new java.awt.Color(0, 153, 0));
        btnGo.setText("GO");
        btnGo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGoActionPerformed(evt);
            }
        });

        lblTotalNew.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblTotalNew.setForeground(new java.awt.Color(0, 153, 51));

        btnTotal.setBackground(new java.awt.Color(255, 255, 255));
        btnTotal.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnTotal.setForeground(new java.awt.Color(0, 153, 0));
        btnTotal.setText("Total");
        btnTotal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTotalActionPerformed(evt);
            }
        });

        tblDrugs2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Medicine", "Manufacturer", "Quantity", "Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblDrugs2);
        if (tblDrugs2.getColumnModel().getColumnCount() > 0) {
            tblDrugs2.getColumnModel().getColumn(0).setResizable(false);
            tblDrugs2.getColumnModel().getColumn(1).setResizable(false);
            tblDrugs2.getColumnModel().getColumn(1).setHeaderValue("Manufacturer");
            tblDrugs2.getColumnModel().getColumn(2).setResizable(false);
            tblDrugs2.getColumnModel().getColumn(3).setResizable(false);
        }

        tblDrugs.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Medicine", "Quantity", "Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblDrugs);
        if (tblDrugs.getColumnModel().getColumnCount() > 0) {
            tblDrugs.getColumnModel().getColumn(0).setResizable(false);
            tblDrugs.getColumnModel().getColumn(1).setResizable(false);
            tblDrugs.getColumnModel().getColumn(2).setResizable(false);
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(807, 807, 807)
                                .addComponent(btnTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(27, 27, 27)
                                .addComponent(lblTotalNew, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnPlaceOrder))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(240, 240, 240)
                                .addComponent(lblName1, javax.swing.GroupLayout.PREFERRED_SIZE, 601, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblName3, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblSelectCountry6))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(cmbCountryList, 0, 173, Short.MAX_VALUE)
                                    .addComponent(cmbManufacturerList, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(31, 31, 31)
                                .addComponent(btnGo, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 540, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblSelectCountry7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtQuantity)
                            .addComponent(btnCopy, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 540, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblName1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblName3)
                            .addComponent(cmbCountryList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblSelectCountry6, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbManufacturerList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnGo))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(59, 59, 59)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblSelectCountry7, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(btnCopy)
                        .addGap(424, 424, 424))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(187, 187, 187)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 115, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(btnPlaceOrder)
                                .addComponent(lblTotalNew, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(btnTotal))
                        .addGap(35, 35, 35))))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnPlaceOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlaceOrderActionPerformed
        // TODO add your handling code here:
        MedicineOrderRequest medicineOrderRequest = new MedicineOrderRequest();
        int selectedRow = tblDrugs.getSelectedRow();
        Medicine medicine = null;

        if (selectedRow > -1) {
            medicine = (Medicine) tblDrugs.getValueAt(selectedRow, 0);
        }
            System.out.println(" ***********************" + medicine);
//        System.out.println("printing from purchase by manu: " + medicine.getManufacturer());
    
        DefaultTableModel dtm = (DefaultTableModel) tblDrugs.getModel();
        int totalRows = tblDrugs.getRowCount();
        Order order = new Order();
        OrderItem orderItem = null;
        Medicine med = null;
        
        for (int i = 0; i < totalRows; i++) {
            int quantity = Integer.parseInt(tblDrugs.getValueAt(i, 1).toString());
            float price = Float.parseFloat(tblDrugs.getValueAt(i, 2).toString());
            total = total + (quantity * price);
            med = (Medicine) tblDrugs.getValueAt(i, 0);
            
            orderItem = new OrderItem(med,quantity,price);
            order.getOrderItemList().add(orderItem);
        }
        
        medicineOrderRequest.setManufacturer(medicine.getManufacturer());
        //medicineOrderRequest.setMedicine(medicine);
        medicineOrderRequest.setMessage("Request for Medicines");
        //medicineOrderRequest.setQuantity(Integer.parseInt(txtQuantity.getText()));
        medicineOrderRequest.setSender(userAccount);
        medicineOrderRequest.setTotalCost(total);
        medicineOrderRequest.setStatus("Sent for Approval");
        medicineOrderRequest.setOrder(order);
        
        
        
        
        userAccount.getWorkQueue().getWorkRequestList().add(medicineOrderRequest);
        System.out.println("pharma ent"  + medicine.getPharmaceuticalEnterprise());
        medicine.getPharmaceuticalEnterprise().getWorkQueue().getWorkRequestList().add(medicineOrderRequest);
        //medicine.getManufacturer().getWorkQueue().getWorkRequestList().add(medicineOrderRequest);


    }//GEN-LAST:event_btnPlaceOrderActionPerformed

    private void cmbManufacturerListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbManufacturerListActionPerformed
        // TODO add your handling code here:.

//        CountryEnterprise countryEnterprise;
//        StateEnterprise stateEnterprise;
//        CityEnterprise cityEnterprise;
//        PharmaceuticalCompanyEnterprise pharmaceuticalCompanyEnterprise;
//        ManufacturingOrganization manufacturingOrganization;
//        DefaultTableModel dtm = (DefaultTableModel) tblDrugs.getModel();
//        dtm.setRowCount(0);
//
//        for (Enterprise country : internationalNetwork.getEnterpriseDirectory().getEnterpriseList()) {
//            if (country.getClass() == CountryEnterprise.class) {
//                countryEnterprise = (CountryEnterprise) country;
//
//                for (Enterprise state : countryEnterprise.getCountryNetwork().getEnterpriseDirectory().getEnterpriseList()) {
//                    if (state.getClass() == StateEnterprise.class) {
//                        stateEnterprise = (StateEnterprise) state;
//
//                        for (Enterprise city : stateEnterprise.getStateNetwork().getEnterpriseDirectory().getEnterpriseList()) {
//                            if (city.getClass() == CityEnterprise.class) {
//                                cityEnterprise = (CityEnterprise) city;
//
//                                for (Enterprise pharma : cityEnterprise.getCityNetwork().getEnterpriseDirectory().getEnterpriseList()) {
//                                    if (pharma.getClass() == PharmaceuticalCompanyEnterprise.class) {
//                                        pharmaceuticalCompanyEnterprise = (PharmaceuticalCompanyEnterprise) pharma;
//
//                                        for (Organization org : pharmaceuticalCompanyEnterprise.getOrganizationDirectory().getOrganizationList()) {
//                                            if (org.getClass() == ManufacturingOrganization.class) {
//                                                manufacturingOrganization = (ManufacturingOrganization) org;
//
//                                                for (Medicine medicine : manufacturingOrganization.getMedicineList()) {
//                                                    if (medicine.getDrug() == (Drug) cmbManufacturerList.getSelectedItem()) {
//                                                        ManufacturingOrganization manuOrg = medicine.getManufacturer();
//                                                        Object[] row = new Object[4];
//                                                        row[0] = medicine;
//                                                        row[1] = manuOrg.getName();
//                                                        row[2] = medicine.getQuantity();
//                                                        row[3] = medicine.getPrice();
//                                                        dtm.addRow(row);
//                                                    }
//                                                }
//                                            }
//                                        }
//                                    }
//                                }
//
//                            }
//                        }
//                    }
//
//                }
//            }
//        }

    }//GEN-LAST:event_cmbManufacturerListActionPerformed

    private void populateCountryList() {
        cmbCountryList.removeAllItems();
        CountryEnterprise countryEnterprise;

        for (Enterprise country : internationalNetwork.getEnterpriseDirectory().getEnterpriseList()) {
            cmbCountryList.addItem((CountryEnterprise) country);

        }

    }

    private void cmbCountryListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbCountryListActionPerformed
        // TODO add your handling code here:

        cmbManufacturerList.removeAllItems();

        CountryEnterprise countryEnterprise = (CountryEnterprise) cmbCountryList.getSelectedItem();

        StateEnterprise stateEnterprise;
        CityEnterprise cityEnterprise;
        PharmaceuticalCompanyEnterprise pharmaceuticalCompanyEnterprise;
        ManufacturingOrganization manufacturingOrganization;

        for (Enterprise state : countryEnterprise.getCountryNetwork().getEnterpriseDirectory().getEnterpriseList()) {
            if (state.getClass() == StateEnterprise.class) {
                stateEnterprise = (StateEnterprise) state;

                for (Enterprise city : stateEnterprise.getStateNetwork().getEnterpriseDirectory().getEnterpriseList()) {
                    if (city.getClass() == CityEnterprise.class) {
                        cityEnterprise = (CityEnterprise) city;

                        for (Enterprise pharma : cityEnterprise.getCityNetwork().getEnterpriseDirectory().getEnterpriseList()) {
                            if (pharma.getClass() == PharmaceuticalCompanyEnterprise.class) {
                                pharmaceuticalCompanyEnterprise = (PharmaceuticalCompanyEnterprise) pharma;

                                for (Organization org : pharmaceuticalCompanyEnterprise.getOrganizationDirectory().getOrganizationList()) {
                                    if (org.getClass() == ManufacturingOrganization.class) {
                                        manufacturingOrganization = (ManufacturingOrganization) org;
                                        cmbManufacturerList.addItem(manufacturingOrganization);
                                        System.out.println("adding values to manufacturer combo box" + manufacturingOrganization + cityEnterprise + pharmaceuticalCompanyEnterprise);
                                    }
                                }

                            }
                        }
                    }
                }
            }
        }
        cmbManufacturerList.setEnabled(true);

    }//GEN-LAST:event_cmbCountryListActionPerformed

    private void btnCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCopyActionPerformed
        // TODO add your handling code here:
        tblDrugs.removeAll();
        int selectedRow = tblDrugs2.getSelectedRow();

//        Component[] compArr = tblDrugs.getComponents();
//        int size = compArr.length;
        System.out.println("selected row" + selectedRow);
        Medicine medicine = null;

        if (selectedRow > -1) {
            medicine = (Medicine) tblDrugs2.getValueAt(selectedRow, 0);
            int quantity = Integer.parseInt(txtQuantity.getText());

            if (medicine.getQuantity() >= quantity) {
                selectedMeds.add(medicine);
                System.out.println("in copy method selected meds size" + selectedMeds.size());
            }

            
            populateSelectedMedsTable(quantity);

        }
    }//GEN-LAST:event_btnCopyActionPerformed

    private void txtQuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtQuantityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtQuantityActionPerformed

    private void btnGoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGoActionPerformed
        // TODO add your handling code here:
        populateMedsTable();


    }//GEN-LAST:event_btnGoActionPerformed

    private void btnTotalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTotalActionPerformed
        // TODO add your handling code here:
        DefaultTableModel dtm = (DefaultTableModel) tblDrugs.getModel();
        int totalRows = tblDrugs.getRowCount();

        for (int i = 0; i < totalRows; i++) {
            int quantity = Integer.parseInt(tblDrugs.getValueAt(i, 1).toString());
            float price = Float.parseFloat(tblDrugs.getValueAt(i, 2).toString());
            total = total + (quantity * price);
        }

        lblTotalNew.setText(String.valueOf(total));

    }//GEN-LAST:event_btnTotalActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCopy;
    private javax.swing.JButton btnGo;
    private javax.swing.JButton btnPlaceOrder;
    private javax.swing.JButton btnTotal;
    private javax.swing.JComboBox cmbCountryList;
    private javax.swing.JComboBox cmbManufacturerList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblName1;
    private javax.swing.JLabel lblName3;
    private javax.swing.JLabel lblSelectCountry6;
    private javax.swing.JLabel lblSelectCountry7;
    private javax.swing.JLabel lblTotal;
    private javax.swing.JLabel lblTotalNew;
    private javax.swing.JTable tblDrugs;
    private javax.swing.JTable tblDrugs2;
    private javax.swing.JTextField txtQuantity;
    // End of variables declaration//GEN-END:variables

    private void populateDrugCombo() {
        cmbManufacturerList.removeAllItems();
        CountryEnterprise countryEnterprise;
        StateEnterprise stateEnterprise;
        CityEnterprise cityEnterprise;
        PharmaceuticalCompanyEnterprise pharmaceuticalCompanyEnterprise;
        ManufacturingOrganization manufacturingOrganization;

        for (Enterprise country : internationalNetwork.getEnterpriseDirectory().getEnterpriseList()) {
            if (country.getClass() == CountryEnterprise.class) {
                countryEnterprise = (CountryEnterprise) country;

                for (Enterprise state : countryEnterprise.getCountryNetwork().getEnterpriseDirectory().getEnterpriseList()) {
                    if (state.getClass() == StateEnterprise.class) {
                        stateEnterprise = (StateEnterprise) state;

                        for (Enterprise city : stateEnterprise.getStateNetwork().getEnterpriseDirectory().getEnterpriseList()) {
                            if (city.getClass() == CityEnterprise.class) {
                                cityEnterprise = (CityEnterprise) city;

                                for (Enterprise pharma : cityEnterprise.getCityNetwork().getEnterpriseDirectory().getEnterpriseList()) {
                                    if (pharma.getClass() == PharmaceuticalCompanyEnterprise.class) {
                                        pharmaceuticalCompanyEnterprise = (PharmaceuticalCompanyEnterprise) pharma;

//                                        for(Organization org: pharmaceuticalCompanyEnterprise.getOrganizationDirectory().getOrganizationList())
//                                        {
//                                            if(org.getClass() == ManufacturingOrganization.class)
//                                            {
//                                                manufacturingOrganization = (ManufacturingOrganization) org;
//                                                
//                                                for(Medicine medicine: manufacturingOrganization.getMedicineList())
//                                                {
//                                                    
//                                                }
                                        for (Drug drug : pharmaceuticalCompanyEnterprise.getDrugList()) {
                                            cmbManufacturerList.addItem(drug);
                                        }
                                    }
                                }
                            }

                        }
                    }
                }

            }
        }
    }

    private void populateSelectedMedsTable(int quantity) {
        DefaultTableModel dtm1 = (DefaultTableModel) tblDrugs.getModel();
        System.out.println("selected meds list size" + selectedMeds.size());
        
        dtm1.setRowCount(0);
        
        for (Medicine medicine : selectedMeds) {
            Object[] row = new Object[3];
            row[0] = medicine;
            //row[1] = medicine.getManufacturer();
            row[1] = quantity;
            row[2] = medicine.getPrice();
            dtm1.addRow(row);
        }
    }

    private void populateMedsTable() {
        ManufacturingOrganization manufacturingOrganization = (ManufacturingOrganization) cmbManufacturerList.getSelectedItem();
        DefaultTableModel dtm = (DefaultTableModel) tblDrugs2.getModel();
        dtm.setRowCount(0);

        for (Medicine medicine : manufacturingOrganization.getMedicineList()) {
            Object[] row = new Object[4];
            row[0] = medicine;
            row[1] = medicine.getManufacturer();
            row[2] = medicine.getQuantity();
            row[3] = medicine.getPrice();
            dtm.addRow(row);

        }
    }
}
